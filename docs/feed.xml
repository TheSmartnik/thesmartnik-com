<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nikita Misharin's blog</title>
  <subtitle>Write-only tech blog</subtitle>
  <id>https://thesmartnik.com/</id>
  <link href="https://thesmartnik.com/"/>
  <link href="https://thesmartnik.com/feed.xml" rel="self"/>
  <updated>2019-07-04T20:42:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Breaking apart inheritable mattr_accessors in HTTParty</title>
    <link rel="alternate" href="https://thesmartnik.com/breaking-apart-inheritable-mattr_accessors-in-httparty.html"/>
    <id>https://thesmartnik.com/breaking-apart-inheritable-mattr_accessors-in-httparty.html</id>
    <published>2019-07-04T20:42:00Z</published>
    <updated>2019-07-24T10:06:15Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;h1&gt;A land of sharp of knives&lt;/h1&gt;

&lt;p&gt;We all know that Ruby provides you with &lt;a href="https://m.signalvnoise.com/provide-sharp-knives/"&gt;sharp knives&lt;/a&gt;. Used with caution they give you great power, but misuse them and you will be remembered at your job long after.&lt;/p&gt;

&lt;p&gt;I like some of those, from outside they look like magic, but inside they often are incomprehensible and hard to debug metaprogramming mess.&lt;/p&gt;

&lt;p&gt;And in this post, I want to dig into one of those: inheritable attr_accessors.&lt;/p&gt;

&lt;h1&gt;A little background&lt;/h1&gt;

&lt;p&gt;A conventional use of &lt;code&gt;HTTParty&lt;/code&gt; is to &lt;code&gt;include&lt;/code&gt; it in your &lt;code&gt;class&lt;/code&gt;. It allows to create nice and simple wrappers around almost any API and perfect for little API gems. Something like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiClient&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;HTTParty&lt;/span&gt;

  &lt;span class="n"&gt;base_uri&lt;/span&gt; &lt;span class="s2"&gt;"example.com"&lt;/span&gt;

  &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clients&lt;/span&gt;
    &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;:clients&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if wanted to inherit from &lt;code&gt;ApiClient&lt;/code&gt;? The obvious behavior would be for a child class to inherit parent&amp;rsquo;s class-defined options.&lt;/p&gt;

&lt;p&gt;As you might have already guessed, there is no straightforward way to do this.&lt;/p&gt;

&lt;h1&gt;Here comes the dragon&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ModuleInheritableAttributes&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ClassMethods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mattr_inheritable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mattr_inheritable_attrs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="nb"&gt;module_eval&lt;/span&gt; &lt;span class="sx"&gt;%(class &amp;lt;&amp;lt; self; attr_accessor :#{arg} end)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inherited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
        &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;ivar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
          &lt;span class="n"&gt;parent_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;
          &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parent_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:merge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;EOM&lt;/span&gt;&lt;span class="sh"&gt;
              def self.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
                 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; = superclass.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;.merge(Marshal.load(Marshal.dump(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;)
                 )
              end
&lt;/span&gt;&lt;span class="no"&gt;            EOM&lt;/span&gt;
            &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class_eval&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I modified a code a bit. Instead of &lt;code&gt;Marshal.load(Marshal.dump()&lt;/code&gt; we now use a &lt;code&gt;hash_deep_dup&lt;/code&gt; borrowed from &lt;code&gt;ActiveSupport&lt;/code&gt;. It makes code even more complex and not relevant to our discussion here, so I replaced it.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s then used like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;HTTParty&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ModuleInheritableAttributes&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mattr_inheritable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@default_options"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, use of the code is simple and easy. Code that achieves that, however&amp;hellip; Well it&amp;rsquo;s complex, to say the least.&lt;/p&gt;

&lt;h1&gt;Let&amp;rsquo;s take a closer look to see how it works&lt;/h1&gt;

&lt;h2&gt;mattr_inheritable&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mattr_inheritable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:mattr_inheritable_attrs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;module_eval&lt;/span&gt; &lt;span class="sx"&gt;%(class &amp;lt;&amp;lt; self; attr_accessor :#{arg} end)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Initializing a &lt;em&gt;class instance variable&lt;/em&gt; to hold our inheritable attributes including the variable itself.&lt;/li&gt;
&lt;li&gt;Adding our new attribute to the array&lt;/li&gt;
&lt;li&gt;Adding accesor to our &lt;strong&gt;module&lt;/strong&gt;. Notice &lt;code&gt;module_eval&lt;/code&gt; here, we evaluate our code in the context of the module. So we are adding accessor not to an instance, but to a module&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;inherited&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inherited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;super&lt;/span&gt;
  &lt;span class="vi"&gt;@mattr_inheritable_attrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;ivar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;parent_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;
    &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parent_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:merge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;EOM&lt;/span&gt;&lt;span class="sh"&gt;
        def self.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;
           &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; = superclass.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inheritable_attribute&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;.merge(Marshal.load(Marshal.dump(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;ivar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;)
           )
        end
&lt;/span&gt;&lt;span class="no"&gt;      EOM&lt;/span&gt;
      &lt;span class="n"&gt;subclass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class_eval&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Starting to iterate over our inheritable attributes&lt;/li&gt;
&lt;li&gt;Getting variable value from parent&lt;/li&gt;
&lt;li&gt;Setting the value to child &lt;/li&gt;
&lt;li&gt;Checking the value respond to &lt;code&gt;#merge&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Here, with &lt;code&gt;class_eval&lt;/code&gt; we redefine our attr reader to always get parent values and then merge with them with values of a subclass. It&amp;rsquo;s needed for cases when parent options were changed &lt;em&gt;after&lt;/em&gt; our child class was evaluated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it 😊&lt;/p&gt;

&lt;h1&gt;A land of magic&lt;/h1&gt;

&lt;p&gt;While reading this you might have thought: &amp;ldquo;God, what a mess!&amp;rdquo;. And that&amp;rsquo;s true, but it also allows for some clean code on the user&amp;rsquo;s side.&lt;/p&gt;

&lt;p&gt;Whether &amp;ldquo;magic&amp;rdquo; is always bad is a controversial topic. Rails have been criticized for years because of it. However, it is also the reason why Rails became so popular in the first place. It&amp;rsquo;s the reason why many of us fell in love with Ruby.&lt;/p&gt;

&lt;p&gt;So, as with every other decision in programming, there is always a trade-off one has to make. When you create a library your objective is to create an easy to use tool and for that, a little magic is sometimes necessary.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>About Ruby Certification</title>
    <link rel="alternate" href="https://thesmartnik.com/about-ruby-certification.html"/>
    <id>https://thesmartnik.com/about-ruby-certification.html</id>
    <published>2019-02-28T13:21:00Z</published>
    <updated>2019-03-18T21:42:20Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;h1&gt;Disclaimer&lt;/h1&gt;

&lt;p&gt;One reddit user &lt;a href="https://www.reddit.com/r/ruby/comments/b0n18j/about_ruby_certification/eifqnth/"&gt;suggested&lt;/a&gt; that it&amp;rsquo;s an advertisement blogpost. It&amp;rsquo;s not. I just wanted to provide some information for those who are interested and also raise general awareness about the topic.&lt;/p&gt;

&lt;h1&gt;Intro&lt;/h1&gt;

&lt;p&gt;Ruby has an official certification provided by Ruby Association, chairman of which is Yukihiro Matsumoto.
I can&amp;rsquo;t say for Japan, but in the rest of the world, it&amp;rsquo;s not very popular. Either it&amp;rsquo;s because Ruby is a community-driven language,
where the knowledge and achievements of an individual programmer are characterized by his or her contributions to Open Source and work experience. Maybe it&amp;rsquo;s because Ruby Association doesn&amp;rsquo;t do anything to promote it. Most of the pages on the official website are in Japanese and you can hardly find any resources on the web on how or why you should take it.&lt;/p&gt;

&lt;p&gt;A few months ago, inspired by Egor Bugayenko&amp;rsquo;s &lt;a href="https://www.yegor256.com/2014/10/29/how-much-do-you-cost.html#certifications"&gt;article&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=SXd_Ccta1c8"&gt;talk&lt;/a&gt; about programmers worth &lt;em&gt;(a provoking theme and title for sure, but it&amp;rsquo;s nevertheless very useful)&lt;/em&gt;, I&amp;rsquo;ve decided to take the ruby certification. The following article is a summary of my experience.&lt;/p&gt;

&lt;h1&gt;About the Certification&lt;/h1&gt;

&lt;p&gt;Currently, Ruby certification consists of two tests: silver and gold. Another one, platinum is still in development. You&amp;rsquo;ll have 90 minutes to answer 50 multiple choice questions. A passing score is 75% and wrong answers don&amp;rsquo;t affect it, which means you have to answer correctly at least 38 questions.&lt;/p&gt;

&lt;p&gt;Tests cost $150 each and are taken in Prometric test centers. They are located all around the world, so there shouldn&amp;rsquo;t be any problem to find one in your area. Right after the completion, you’ll get the results and in a week a digital certificate will be emailed to you.&lt;/p&gt;

&lt;p&gt;Here is how certificates look: &lt;a href="https://www.credential.net/k6zuqudp"&gt;Silver&lt;/a&gt;/&lt;a href="https://www.credential.net/s0bd99gu"&gt;Gold&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Hey, why do I need to take the certification, again?&lt;/h1&gt;

&lt;p&gt;Before taking the certification I was quite suspicious about it and had a few questions:&lt;/p&gt;

&lt;h3&gt;Can it really tell if I know Ruby well?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d say that both tests are good at what they aim to do. As you&amp;rsquo;ll see later, questions aren&amp;rsquo;t simple. They test variety of different aspects of ruby both in wide and depth.&lt;/p&gt;

&lt;h3&gt;Aren&amp;rsquo;t it&amp;rsquo;s just an enterprise thing to make your CV look shiny?&lt;/h3&gt;

&lt;p&gt;Well, your CV will look shinier. And you&amp;rsquo;ll be also able to say that you&amp;rsquo;re certified ruby developer.&lt;/p&gt;

&lt;h3&gt;But will anyone actually care?&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t know. Probably not, but I learned a lot during preparation. So, I&amp;rsquo;d say it was worthwhile.&lt;/p&gt;

&lt;h1&gt;Preparation&lt;/h1&gt;

&lt;h2&gt;Silver&lt;/h2&gt;

&lt;p&gt;Silver test covers the basics of ruby. Some basic edge cases of syntax. And not so well known methods of most popular classes. They may not appear in your day to day work, but you&amp;rsquo;ll definitely encounter them sooner or later.&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t really write the exact questions, but here is an example to give you an idea:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s suppose you&amp;rsquo;ve defined a constant, what will happen if you try to redefine it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In real life, you won&amp;rsquo;t ever need to change constant &lt;em&gt;(I mean, that what constant means, right?)&lt;/em&gt;. In ruby, however, you &lt;strong&gt;can&lt;/strong&gt; change it. So, even though it&amp;rsquo;s not very useful, it&amp;rsquo;s a good thing to know how your tools work and behave.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ruby.or.jp/en/certification/examination/"&gt;Ruby certification site&lt;/a&gt; has a list of topics that tests cover. In my opinion, It&amp;rsquo;s rather broad and unclear. So for actual questions, you need to look at a prep test.&lt;/p&gt;

&lt;p&gt;There are two prep tests you can use. One can be found on &lt;a href="https://www.ruby.or.jp/assets/images/en/certification/exam_prep_en.pdf"&gt;Ruby Association website&lt;/a&gt; &lt;em&gt;(it&amp;rsquo;s an old version with only 45 questions, but is still helpful)&lt;/em&gt; and one on &lt;a href="https://github.com/ruby-association/prep-test/blob/master/silver.md"&gt;github&lt;/a&gt;. These tests are really good, they provide an explanation to answers and show you &lt;strong&gt;exactly&lt;/strong&gt; what would you expect during an actual test.&lt;/p&gt;

&lt;p&gt;I suggest you to take prep tests and if you find out that you scored 85-90%, you are all set and ready for the test. During the certification, my score was just a little below the prep one &lt;em&gt;(5-7%)&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;What if you don&amp;rsquo;t want to take the test?&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t believe in certifications or just don&amp;rsquo;t want to spend $150, I still encourage you to take a prep test. It&amp;rsquo;s a great learning material. It will show you the gaps in your knowledge and generally a really fun thing to do.&lt;/p&gt;

&lt;p&gt;One more thing. If you conduct an interview and not really sure what questions to ask. Pick a few from the tests. They are good 👌&lt;/p&gt;

&lt;h2&gt;Gold&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s a trickier one. It has lot&amp;rsquo;s of questions on completely different topics: &lt;a href="why-on-earth-do-fibers-exist.html"&gt;Fibers&lt;/a&gt;, meta programming, &lt;a href="what-protected-actually-does.html"&gt;method visibility modifiers&lt;/a&gt;, exceptions, exception ancestry chain, catch/throw, use of Enumerable and Comparable, Refinements.&lt;/p&gt;

&lt;p&gt;A few books I&amp;rsquo;ve read previously that were of great help during the test are &lt;a href="http://exceptionalruby.com/"&gt;Exceptional Ruby&lt;/a&gt;, &lt;a href="http://www.confidentruby.com/"&gt;Confident Ruby&lt;/a&gt;, &lt;a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2"&gt;Metaprogramming Ruby&lt;/a&gt;. If you haven&amp;rsquo;t read these, I encourage you to. Even if you don&amp;rsquo;t plan to take the test. These are generally really good Ruby books that will boost your understanding and knowledge of the language.&lt;/p&gt;

&lt;p&gt;As a silver test, gold one also has &lt;a href="https://github.com/ruby-association/prep-test/blob/master/gold.md"&gt;a prep test&lt;/a&gt;, but it doesn&amp;rsquo;t contain the full range of questions you&amp;rsquo;ll face during an official examination. So take prep test, see where your gaps are and study them carefully.&lt;/p&gt;

&lt;p&gt;Overall, Gold Certification is a lot more fun, challenging and rewarding experience.&lt;/p&gt;

&lt;h1&gt;Registration&lt;/h1&gt;

&lt;p&gt;When you&amp;rsquo;re ready to take a test. Time for registration. Just go to a &lt;a href="https://www.prometric.com/en-us/clients/ruby/Pages/landing.aspx"&gt;Prometric website&lt;/a&gt;, choose the certification you want, and book your time and place.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it. All you&amp;rsquo;ll need now is to arrive at the test center at a chosen date and take the test.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the end, I’m glad I took the certification. I learned a lot along the way and it’s so fun to discover new things in tools you’ve known for years. Some things I’ve learned I’ll only need in job interviews, but some are very helpful and I started to use in my code right away.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Why on earth do fibers exist?</title>
    <link rel="alternate" href="https://thesmartnik.com/why-on-earth-do-fibers-exist.html"/>
    <id>https://thesmartnik.com/why-on-earth-do-fibers-exist.html</id>
    <published>2018-11-23T14:11:00Z</published>
    <updated>2018-11-26T21:08:52Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;First, let&amp;rsquo;s answer the question right away. Fibers were created so one could implement generator pattern which in ruby is incorporated in &lt;code&gt;Enumerator&lt;/code&gt;. That&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;To quote &lt;a href="https://www.amazon.com/dp/0596516177"&gt;one book:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fibers are an advanced and relatively obscure control structure; the majority of Ruby programmers will never need to use the Fiber class directly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you know the truth. Let&amp;rsquo;s start from the beginning.&lt;/p&gt;

&lt;h2&gt;A bit of history&lt;/h2&gt;

&lt;p&gt;Back in ruby 1.8 &lt;a href="https://github.com/ruby/ruby/blob/ruby_1_8_7/lib/generator.rb"&gt;generator was implemented through continuations&lt;/a&gt;, little-known control structure inspired by Lisp. Continuations main use is again to make generators and programs that needed &lt;a href="https://en.wikipedia.org/wiki/Backtracking"&gt;backtracking:&lt;/a&gt; &lt;a href="http://www.randomhacks.net/2005/10/11/amb-operator/"&gt;ambiguous operator&lt;/a&gt;, for example. It has bugs,  unpredictable behavior and implemented only in CRuby. Very few understand what it is for and even fewer actually tried to use it.&lt;/p&gt;

&lt;p&gt;Then, ruby 1.9 with YARV came along. Continuations became to be &lt;a href="http://www.atdot.net/~ko1/pub/ContinuationFest-ruby.pdf"&gt;harmful&lt;/a&gt; and were moved to the standard library. &lt;code&gt;Enumerator&lt;/code&gt; was rewritten in C using fibers.&lt;/p&gt;

&lt;h2&gt;Fibers&lt;/h2&gt;

&lt;p&gt;In other languages, fiber is the name for a lightweight thread. In ruby, it is a coroutine. Why it&amp;rsquo;s not named coroutine then, you might ask? Well, because fiber sounds better &lt;a href="http://www.atdot.net/~ko1/pub/ContinuationFest-ruby.pdf"&gt;apparently&lt;/a&gt;(Page 20).&lt;/p&gt;

&lt;p&gt;There are two types of coroutines: semicouroutune and coroutine. They only differ in the way they transfer control.&lt;/p&gt;

&lt;h3&gt;Semicouroutune a.k.a Asymmetric Coroutines&lt;/h3&gt;

&lt;p&gt;These coroutines called asmymetric, because there is fundamental asymmetry between caller and coroutine. &lt;em&gt;Resumed&lt;/em&gt; by the caller, coroutine &lt;strong&gt;can&amp;rsquo;t&lt;/strong&gt; transfer control to any other coroutine, only to suspend itself and &lt;em&gt;yield&lt;/em&gt; control back to the caller.&lt;/p&gt;

&lt;p&gt;This is the default mode for ruby fibers.&lt;/p&gt;

&lt;h3&gt;Symmetric Coroutines&lt;/h3&gt;

&lt;p&gt;If you &lt;code&gt;require &amp;#39;fiber&amp;#39;&lt;/code&gt;, though. &lt;code&gt;Fiber&lt;/code&gt; becomes symmetric coroutine, which basically means that now, fibers can transfer control between one another &lt;em&gt;(there are limitations in ruby, though. But here is the basic idea)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Okay, now when we become familiar with fibers and coroutines. Let&amp;rsquo;s look at the thing you can build with them.&lt;/p&gt;

&lt;h2&gt;Generator&lt;/h2&gt;

&lt;h3&gt;Why would I need generators, again?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll be completely honest. You probably don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Having said that, they are pretty cool. They are generally useful for partial computations or laziness. In ruby, there are two options to make something lazy: through &lt;code&gt;Enumerator#next&lt;/code&gt;(which uses fibers) and through &lt;code&gt;Enumerator::Lazy&lt;/code&gt;(which doesn&amp;rsquo;t)&lt;/p&gt;

&lt;h3&gt;Partial computations&lt;/h3&gt;

&lt;p&gt;Here is the basic generator&amp;rsquo;s algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compute a partial result&lt;/li&gt;
&lt;li&gt;Return the result back to the caller&lt;/li&gt;
&lt;li&gt;Save the state&lt;/li&gt;
&lt;li&gt;If needed, resume the generator to get the next result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s see an example with enumerator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;enumerator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;yielder&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;yielder&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Enumerator: #&amp;lt;Enumerator::Generator:0x00007fe6ac9d41e0&amp;gt;:each&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rewind&lt;/span&gt;
&lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, I know. That example probably doesn&amp;rsquo;t raise your eyebrows, except for the syntax, of course. I mean use &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; to return control, really?
By the way, there is an even more confusing alias for that &amp;ndash; &lt;code&gt;yield&lt;/code&gt;. It corresponds to &lt;code&gt;Fiber.yield&lt;/code&gt;, but has nothing to do with ruby keyword &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, let&amp;rsquo;s see how it works.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You pass a block, where you do computation&lt;/li&gt;
&lt;li&gt;On &lt;code&gt;#next&lt;/code&gt; the block is called from the beginning or where it left of&lt;/li&gt;
&lt;li&gt;You return from the function with a result using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go back to step .2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Enumerator&lt;/code&gt; allows you to do two types of iterations: internal and external.
 In daily life, we usually see enumerators as internal iterators. It is returned everytime you call &lt;code&gt;Enumerable&lt;/code&gt; methods without any arguments and it allows you to chain those methods together: &lt;code&gt;each.with_index&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Additionally, you can use enumerator as an external iterator as shown in the example above. This construct might be useful for heavy computations, where saving the previous state would save a lot of time and doing so with &lt;code&gt;Enumerator&lt;/code&gt; would also be more readable than saving the previous state yourself. Unfortunately, it&amp;rsquo;s not a very popular method &lt;em&gt;(as laziness in ruby in general)&lt;/em&gt; and I couldn&amp;rsquo;t find any good examples of it in the wild 😞&lt;/p&gt;

&lt;h2&gt;The Fun Part&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ve read a lot of theory, not it&amp;rsquo;s time for &lt;em&gt;the fun part&lt;/em&gt;. The best way to learn something is to build it, right? Also, it&amp;rsquo;s probably the only time you&amp;rsquo;ll ever actually use fibers, so let&amp;rsquo;s get to it.&lt;/p&gt;

&lt;h3&gt;Generator&lt;/h3&gt;

&lt;p&gt;Ok, let&amp;rsquo;s look at the &lt;code&gt;Enumerator&lt;/code&gt; example again. What we can say about it?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enumerator accepts block&lt;/li&gt;
&lt;li&gt;The block is being called with an argument&lt;/li&gt;
&lt;li&gt;The argument has a method &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; that returns computation result&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s pretty much all we need to be able to construct a simple abstraction over fiber. We&amp;rsquo;ll call it &lt;code&gt;Generator&lt;/code&gt; because that&amp;rsquo;s what it is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Generator&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yielder&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="c1"&gt;# Argument that accepts &amp;lt;&amp;lt;&lt;/span&gt;
      &lt;span class="no"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;# And returns computation result&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# Accepts block&lt;/span&gt;
    &lt;span class="vi"&gt;@block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;           
    &lt;span class="vi"&gt;@fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fiber&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;
    &lt;span class="vi"&gt;@fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resume&lt;/span&gt;             
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewind&lt;/span&gt;                  
    &lt;span class="vi"&gt;@fiber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fiber&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_fiber&lt;/span&gt;            
    &lt;span class="no"&gt;Fiber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="vi"&gt;@block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Yielder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# Block being call with an argument&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it. Here is the tiniest possible version of a generator.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s test that it works as expected. We&amp;rsquo;ll use &lt;code&gt;Enumerable&lt;/code&gt; this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="no"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;yielder&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="no"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;INFINITY&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;yielder&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;    &lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;    &lt;span class="c1"&gt;# =&amp;gt; 2&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;    &lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rewind&lt;/span&gt; 
&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;    &lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;For a long time, I couldn&amp;rsquo;t understand why fibers exist. I thought there was something special about them, something that I just couldn&amp;rsquo;t grasp. Turned out there wasn&amp;rsquo;t. They are very specific things, created for a very specific task.&lt;/p&gt;

&lt;p&gt;I hope that this article gave you a better understanding of what &lt;code&gt;Fiber&lt;/code&gt; is, what it&amp;rsquo;s not and how it&amp;rsquo;s used.&lt;/p&gt;

&lt;h2&gt;Update about concurrency&lt;/h2&gt;

&lt;p&gt;Remember that fibers in ruby have two mods? I haven&amp;rsquo;t really talked about fibers as symmetric coroutines and one redditor &lt;a href="https://www.reddit.com/r/ruby/comments/a0ivny/why_on_earth_do_fibers_exist/eai2k67/"&gt;pointed that out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given an ability to transfer control between one another, fibers can be used to write asynchronous concurrent code. To do this you&amp;rsquo;ll need a library that implements event loop such as &lt;a href="https://github.com/socketry/async"&gt;async&lt;/a&gt; or &lt;a href="https://github.com/eventmachine/eventmachine"&gt;eventmachine&lt;/a&gt; or you can even build your own simple reactor with ruby &lt;code&gt;io/nonblock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When it is useful? In tasks that require a lot of io such as web requests. There are two great examples of this: &lt;a href="https://github.com/postrank-labs/goliath"&gt;goliath&lt;/a&gt; webserver that uses &lt;code&gt;eventmachine&lt;/code&gt; and &lt;a href="https://github.com/socketry/falcon"&gt;falcon&lt;/a&gt; build on top of the &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I tried to give a brief explanation here, so nothing was left out and you had a complete picture. While it&amp;rsquo;s not in depth look at fibers as means for concurrency, I hope you now better understand how they can be utilized.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Debugging Adventures: #1</title>
    <link rel="alternate" href="https://thesmartnik.com/debugging-adventures-1.html"/>
    <id>https://thesmartnik.com/debugging-adventures-1.html</id>
    <published>2018-10-24T13:21:00Z</published>
    <updated>2018-11-15T13:25:11Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;I love debugging. You know, the one that makes you dig into the source code of a library or a language. When everything should work just fine, but it doesn&amp;rsquo;t. When you have no idea what to do and desperately executing same commands hoping for a different result. And it is an adventure really: you kinda know the path, but have no idea where it will lead you.&lt;/p&gt;

&lt;p&gt;Anyway, a few months ago I&amp;rsquo;ve been looking through &lt;a href="https://ruby-doc.org/core-2.5.1/Array.html#method-i-concat"&gt;an official ruby documentation&lt;/a&gt; and I had noticed that links to &lt;code&gt;Array#+&lt;/code&gt; are broken. Immediately after that, encouraged by the thought, that soon I&amp;rsquo;ll be a ruby contributor &lt;em&gt;(no one need to know it&amp;rsquo;s been just documentation, right?)&lt;/em&gt; I opened up a source code and&amp;hellip; Nothing. Documentation to a method looked just fine.&lt;/p&gt;

&lt;p&gt;And at that point, I knew it won&amp;rsquo;t be as easy as I initially thought.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t really sure what to do at first. Then, a small detail caught my attention: a sidebar. A sidebar on the left of the page, where a link to &lt;code&gt;#+&lt;/code&gt; worked just fine. &lt;/p&gt;

&lt;p&gt;Well, that looks great, I thought. I&amp;rsquo;ll just copy the link from sidebar and change documentation to something like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*
 * ...
 *  See also {Array#+}[#method-i-2B].
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had my doubts, of course. I wasn&amp;rsquo;t sure how &lt;code&gt;i-2B&lt;/code&gt; is generated and can get be changed by some unforeseen events. I did a bit of digging into rdoc&amp;rsquo;s source code and &lt;a href="https://github.com/ruby/rdoc/blob/b7449e4b2d71c16e58f5a5db859867e8c90246ac/lib/rdoc/method_attr.rb#L291-L295"&gt;it seemed to be fine&lt;/a&gt;. So I&amp;rsquo;ve decided that&amp;rsquo;ll do.&lt;/p&gt;

&lt;p&gt;Reading this, you probably saying to yourself: &amp;ldquo;Wait a minute, this just looks like a hack. Why do you have to hard code a link? Why can&amp;rsquo;t it be generated automatically?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Well, that was my thought exactly. I tried to convince myself that the solution above is good enough and working link better, than not a working one etc. But I couldn&amp;rsquo;t really do it, so I decided to take a quick look. Maybe it would be a quick fix, who knows.&lt;/p&gt;

&lt;p&gt;So, a few moments after, I was staring at Rdoc&amp;rsquo;s source code. And I continued doing so for six straight hours. I don&amp;rsquo;t know if you aware, but Rdoc code isn&amp;rsquo;t &lt;a href="https://github.com/ruby/rdoc/blob/b7449e4b2d71c16e58f5a5db859867e8c90246ac/lib/rdoc/markup/to_html_crossref.rb#L147-L154"&gt;the most readable&lt;/a&gt;. I mean it does &lt;a href="https://github.com/TheSmartnik/rdoc/blob/0e655546b4d3f9d00982f12f87f968dd5b96103a/lib/rdoc/cross_reference.rb#L31-L73"&gt;raise questions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And in the end? Well the whole fix, just took &lt;a href="https://github.com/ruby/rdoc/pull/632"&gt;one line of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why am I telling this? Well, I feel like debugging is often daunting and  frustrating: nothing is working and you don&amp;rsquo;t know why. But if you look at this from another perspective, it also can be fun and adventurous. Your princes will probably be in another castle most of the time, but it should never stop you from trying to save her 😁&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Memory Profiling in Practice</title>
    <link rel="alternate" href="https://thesmartnik.com/ruby-memory-profiling-in-practice.html"/>
    <id>https://thesmartnik.com/ruby-memory-profiling-in-practice.html</id>
    <published>2018-08-19T14:09:00Z</published>
    <updated>2018-08-20T15:02:02Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;When I only started programming, I loved tasks related to profiling and optimization.
However, my knowledge on this subject was very limited and I desperately searched for articles with some tips and tricks on how to profile properly.
I thought there were some secrets or techniques, that I should know. A few years forward, I can say there a none, really 🤷‍♂️.&lt;/p&gt;

&lt;p&gt;But here are some tips to give you confidence.&lt;/p&gt;

&lt;h2&gt;Basic steps&lt;/h2&gt;

&lt;p&gt;Profiling itself is very easy and consists of four basic steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Profile&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find bottleneck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix bottleneck&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Profile again &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;How to profile&lt;/h2&gt;

&lt;p&gt;Ruby has a rich set of decent profiling tools. Some would disagree, but in my opinion, they are good enough.&lt;/p&gt;

&lt;p&gt;Depending on a type of problem you have, you&amp;rsquo;ll need a different type of profiler. We are talking about memory here, so we&amp;rsquo;ll take &lt;a href="https://github.com/SamSaffron/memory_profiler"&gt;memory_profiler&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Splitting the work&lt;/h3&gt;

&lt;p&gt;Profiling itself requires a lot of memory. Therefore, if you start to profile the whole process, you&amp;rsquo;ll probably run out of memory pretty quick.&lt;/p&gt;

&lt;p&gt;There is a general solution to this. Divide process into few major parts and profile each of them one by one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It may seem obvious, but I feel like it&amp;rsquo;s an important thing to note.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;How to find and fix a bottleneck&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Look at the report.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the code that takes the most memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look at the code. Does it create any unnecessary objects? Can you rewrite it to allocate less memory?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimize it if it&amp;rsquo;s possible. If not, go to the next piece of memory-heavy code in the report.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Any unnecessary objects?&lt;/h3&gt;

&lt;p&gt;Here is a couple of examples to illustrate what I mean. I recently had a problem with middleman. It constantly used more memory than my 512 MB dyno allowed. So I had to find a solution. &lt;/p&gt;

&lt;h4&gt;Middleman&lt;/h4&gt;

&lt;p&gt;Middleman created extra array each time I ignored the object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- resources.map do |r|
&lt;/span&gt;&lt;span class="gi"&gt;+ resources.each do |r|
&lt;/span&gt;  if ignored?(r.normalized_path)
    r.ignore!
  elsif !r.is_a?(ProxyResource) &amp;amp;&amp;amp; r.file_descriptor &amp;amp;&amp;amp; ignored?(r.file_descriptor.normalized_relative_path)
    r.ignore!
  end
&lt;span class="gd"&gt;-  r
&lt;/span&gt;end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Seems like a very small thing. However, I had thousands of ignored objects. And those little arrays accounted for 10% of memory used during initialization.
Here is &lt;a href="https://github.com/middleman/middleman/pull/2183"&gt;a link to pr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Usually, this is a small win and it doesn&amp;rsquo;t help much, what you&amp;rsquo;re looking for is a big win, like the one below.&lt;/p&gt;

&lt;h4&gt;Middleman S3 Sync&lt;/h4&gt;

&lt;p&gt;Gem &lt;code&gt;middleman_s3_sync&lt;/code&gt; first created sync objects and then ignored ones that don&amp;rsquo;t need to be synced. The strategy is ok most of the time, but not in my case of hundreds or even thousands ignored resources. It&amp;rsquo;s very unwise use of resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;manipulate_resource_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mm_resources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Middleman&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;S3Sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mm_resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mm_resources&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;manipulate_resource_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Middleman&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;S3Sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mm_resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignored?&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target_resource&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:target_resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This 8 lines of code freed up 200MB of memory. Here is &lt;a href="https://github.com/fredjean/middleman-s3_sync/pull/155"&gt;a link to this little pr&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;In a report everything is fine. What should I do?&lt;/h3&gt;

&lt;p&gt;These a couple of tips that really helped me during profiling.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If the report is fine. Double check that data you profile with is the same used in production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to disable parts of the code in staging and check if used memory dropped significantly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h2&gt;No bottlenecks. My code is perfect. Third-party code is perfect. But it takes SO MUCH MEMORY.&lt;/h2&gt;

&lt;p&gt;Well, if you can&amp;rsquo;t find a room for optimization and everything is fine. The only solution is to rethink the whole approach. Find a different solution to the same problem and rewrite this functionality altogether.&lt;/p&gt;

&lt;p&gt;Many people jump to above method without attempting to find an actual problem in their code. I don&amp;rsquo;t really like to do so. Profiling isn&amp;rsquo;t hard and once you find a problem it&amp;rsquo;s usually easy to fix it.&lt;/p&gt;

&lt;p&gt;Rewrites are usually taking so much more time. And when you don&amp;rsquo;t try to find problems in your code, you&amp;rsquo;re bound to make the same mistakes again. Optimization tasks are a great way to learn and grow as an engineer.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ActiveJob In Retrospect</title>
    <link rel="alternate" href="https://thesmartnik.com/active-job-in-retrospect.html"/>
    <id>https://thesmartnik.com/active-job-in-retrospect.html</id>
    <published>2018-07-12T14:11:00Z</published>
    <updated>2018-08-20T15:05:40Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;Recently, I replaced &lt;code&gt;ActiveJob&lt;/code&gt; with &lt;code&gt;Resque&lt;/code&gt; &lt;em&gt;(why it&amp;rsquo;s resque and not sidekiq is a whole other matter)&lt;/em&gt;, which got me into thinking of ActiveJob usefulness as a whole.&lt;/p&gt;

&lt;p&gt;Creating &lt;code&gt;ActiveRecord&lt;/code&gt; was a very reasonable thing to do. It&amp;rsquo;s enough to look at connection adapters for &lt;a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb"&gt;postgres&lt;/a&gt; and &lt;a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/mysql/database_statements.rb"&gt;mysql&lt;/a&gt; to see why.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Lots of methods&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quite a different implementation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hard to remember&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hard to switch to projects, where a database is not the one you&amp;rsquo;re used to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And of course, it gives an ability to switch databases without changing code (unless you use db specific features as most of us do)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let&amp;rsquo;s look at ActiveJob&amp;rsquo;s adapters.&lt;/p&gt;

&lt;h4&gt;Sidekiq&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SidekiqAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
    &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provider_job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;JobWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wrapped"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"queue"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"args"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enqueue_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
    &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provider_job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"class"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;JobWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wrapped"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"queue"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"args"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s2"&gt;"at"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Resque&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ResqueAdapter&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
        &lt;span class="no"&gt;JobWrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:@queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;Resque&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enqueue_to&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;JobWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enqueue_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#:nodoc:&lt;/span&gt;
        &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;Resque&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:enqueue_at_with_queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"To be able to schedule jobs with Resque you need the "&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
            &lt;span class="s2"&gt;"resque-scheduler gem. Please add it to your Gemfile and run bundle install"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="no"&gt;Resque&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enqueue_at_with_queue&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;JobWrapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s it, just two methods. Do we really need an abstraction layer for just two methods?&lt;/p&gt;

&lt;p&gt;Sometimes yes, but do we really need an abstraction layer that prevents us from using &lt;a href="https://github.com/lantins/resque-retry/issues/140"&gt;features&lt;/a&gt; without monkey patching &lt;em&gt;(not to say it&amp;rsquo;s an absolute evil, but it rather error prone)&lt;/em&gt; or adds unnecessary &lt;a href="https://github.com/mperham/sidekiq/wiki/Active-Job#performance"&gt;performance overhead&lt;/a&gt;?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Rails is very good at tools that, provided out of the box, just work. Minimum if any configuration and you all set. However, setting up any background job framework is simple. Just five lines of code for sidekiq and a little more for resque.&lt;/p&gt;

&lt;p&gt;Another feature that &lt;code&gt;ActiveJob&lt;/code&gt; provides is an ability to change background processing backend  with one line of code. Although, I think it&amp;rsquo;s a rare use case. I used it once to switch from resque to sidekiq to resque again. And it wasn&amp;rsquo;t one line of code. With &lt;code&gt;ActiveJob&lt;/code&gt; the only thing I avoided is a few global &amp;lsquo;Find And Replace&amp;rsquo; over the codebase.&lt;/p&gt;

&lt;p&gt;When something is a default and works out of the box, there is a lot of inner resistance in replacing it. &lt;code&gt;ActiveJob&lt;/code&gt; brings little agility, gives another &lt;em&gt;default&lt;/em&gt; interface to learn how to work with and how to test properly. It also adds the possibility that some external gems won&amp;rsquo;t work and you would have to somehow monkey patch this gem to make it work or get rid of &lt;code&gt;ActiveJob&lt;/code&gt; altogether. All this and not much profit in return.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Generating pdf with wickedpdf in sidekiq</title>
    <link rel="alternate" href="https://thesmartnik.com/generating-pdf-with-wickedpdf-in-sidekiq.html"/>
    <id>https://thesmartnik.com/generating-pdf-with-wickedpdf-in-sidekiq.html</id>
    <published>2018-06-14T14:11:00Z</published>
    <updated>2018-08-19T14:04:10Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;Recently, I had to generate invoice pdf in a background job.
There is a &lt;a href="https://github.com/mileszs/wicked_pdf/wiki/Background-PDF-creation-via-delayed_job-gem"&gt;documentation&lt;/a&gt; for how to do so, but it seemes overly complicated.&lt;/p&gt;

&lt;p&gt;Here is a shorter, more readable version and without unnecessary &lt;code&gt;class_eval&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app/views/resources/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;file: &lt;/span&gt;&lt;span class="s1"&gt;'show.html.slim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;resource: &lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="no"&gt;WickedPdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pdf_from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Returned pdf you can then &lt;strong&gt;upload to S3&lt;/strong&gt; or **store in a file.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What protected actually does?</title>
    <link rel="alternate" href="https://thesmartnik.com/what-protected-actually-does.html"/>
    <id>https://thesmartnik.com/what-protected-actually-does.html</id>
    <published>2017-11-25T14:11:00Z</published>
    <updated>2018-08-19T14:04:10Z</updated>
    <author>
      <name>Mikita Misharin</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; visibility isn’t popular, nor should it be. Having surprising and little known behaviour, that will confuse future maintainers, there are only few possible and even fewer justified use cases for it.&lt;/p&gt;

&lt;h2&gt;Behaviour&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;protected&lt;/code&gt; methods can be explicitly called on objects, if caller is an &lt;strong&gt;instance&lt;/strong&gt; of the same or descendant class .&lt;/p&gt;

&lt;p&gt;Here is an example with comparison of &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; visibility modifiers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;public_method&lt;/span&gt;
     &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'public'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;protected_method&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'protected'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;private_method&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'private'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooBar&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;public_method&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt; public&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;protected_method&lt;/span&gt;  &lt;span class="c1"&gt;#&amp;gt; protected&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private_method&lt;/span&gt;  &lt;span class="c1"&gt;#&amp;gt; NoMethodError&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Baz&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;public_method&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt; public&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;protected_method&lt;/span&gt;  &lt;span class="c1"&gt;#&amp;gt; NoMethodError&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;private_method&lt;/span&gt;  &lt;span class="c1"&gt;#&amp;gt; NoMethodError&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from example above, &lt;code&gt;public&lt;/code&gt; can be called from anywhere. &lt;code&gt;protected&lt;/code&gt; from and instance of the same or descendant class .  And &lt;code&gt;private&lt;/code&gt; can’t be called on instance  at all.&lt;/p&gt;

&lt;h3&gt;respond_to?&lt;/h3&gt;

&lt;p&gt;One important thing  to note.
&lt;code&gt;respond_to?&lt;/code&gt; doesn’t include protected and private methods in search. You should pass second boolean argument to enable this feature.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooBar&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:protected_method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt; false&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:protected_method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt; true&lt;/span&gt;
    &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;protected_method&lt;/span&gt; &lt;span class="c1"&gt;#&amp;gt; protected&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;In the wild&lt;/h2&gt;

&lt;h3&gt;Huginn. The good.&lt;/h3&gt;

&lt;p&gt;Other design choices aside. The following snippet is a simplified extract from &lt;a href="https://github.com/huginn/huginn/blob/master/lib/location.rb"&gt;Huginn source code&lt;/a&gt;. And &lt;code&gt;protected&lt;/code&gt; here is a rare example of correct usage.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Location&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kp"&gt;protected&lt;/span&gt; &lt;span class="ss"&gt;:[]=&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:latitude&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:longitude&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Struct descendant’s can assign variables both through &lt;code&gt;[]=&lt;/code&gt; method and through explicit setters. Here, as you can see, &lt;code&gt;[]=&lt;/code&gt; is protected to prevent assigning instance attributes with anything, but redefined setters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;struct Location latitude=nil, longitude=nil&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;53.1242&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;53.1242&lt;/span&gt;

&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:longitude&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;42.2124&lt;/span&gt;
&lt;span class="no"&gt;NoMethodError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;protected&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="sb"&gt;`[]=' called for #&amp;lt;struct Location latitude=53.1242, longitude=nil&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Grape &amp;amp; Devise. The Bad&lt;/h3&gt;

&lt;h4&gt;Grape&lt;/h4&gt;

&lt;p&gt;Let’s look at an example use of &lt;code&gt;protected&lt;/code&gt;  in a simple coercion class. I’ll provide code, without comments, full source code &lt;a href="https://github.com/ruby-grape/grape/blob/220c345dff9602e431ac780abcb98dbb24293395/lib/grape/validations/types/json.rb#L33-L41"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Grape&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Validations&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Json&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Virtus&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Attribute&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coerce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^\\s*$/&lt;/span&gt;
          &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;symbolize_names: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_coerced?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;coerced_collection?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="kp"&gt;protected&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coerced_collection?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonArray&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Json&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coerce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;
          &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_coerced?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;coerced_collection?&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you can see an example of very common misconception that &lt;code&gt;private&lt;/code&gt;  methods can’t be called inside child classes and  &lt;code&gt;protected&lt;/code&gt;  methods should be called instead  &lt;em&gt;(As in Java&lt;/em&gt;C)/. It is wrong.  You don’t need  &lt;code&gt;protected&lt;/code&gt;  here, If we replace it with &lt;code&gt;private&lt;/code&gt; the code will work just fine. And it would be better, because it will be less confusing for a reader.&lt;/p&gt;

&lt;h4&gt;Devise&lt;/h4&gt;

&lt;p&gt;Repeats the same mistake Grape does. It uses &lt;code&gt;protected&lt;/code&gt;  in modules, that are intended be included in user generated models and controllers. So, &lt;code&gt;protected&lt;/code&gt; in this case can be replaced with  &lt;code&gt;private&lt;/code&gt; as those methods are never called on instance&lt;/p&gt;

&lt;h3&gt;Rails. The Ugly&lt;/h3&gt;

&lt;p&gt;First, in &lt;code&gt;ActionDispatch::Routing::UrlFor&lt;/code&gt;  module we define a protected method &lt;code&gt;optimize_routes_generation?&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;protected&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_routes_generation?&lt;/span&gt;
  &lt;span class="n"&gt;_routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;optimize_routes_generation?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;default_url_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then later in code call it via &lt;code&gt;send&lt;/code&gt;  from &lt;code&gt;ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;optimize_routes_generation?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:optimize_routes_generation?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main point, of &lt;code&gt;protected&lt;/code&gt; is to allow instances of the same and descendant classes to call interior methods, that no one else outside have no need to know about.  If some outside instance needs to call &lt;code&gt;protected&lt;/code&gt; method, just leave it &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
